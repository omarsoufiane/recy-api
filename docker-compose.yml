# YAML configuration file for Docker Compose

# Define services
services:
  otel-collector:
    image: otel/opentelemetry-collector:0.61.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./etc/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "55679:55679" # zpages extension
    depends_on:
      - tempo
      - prometheus

  tempo:
    image: grafana/tempo:2.2.3
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./etc/tempo.yaml:/etc/tempo.yaml
      - ./data/tempo-data:/tmp/tempo
    ports:
      - "14268" # jaeger ingest
      - "3200"  # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"  # zipkin

  loki:
    image: grafana/loki:2.8.5
    command: -config.file=/etc/loki/loki.yaml
    ports:
      - "3100:3100" # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ./etc/loki.yaml:/etc/loki/loki.yaml
      - ./data/loki-data:/tmp/loki

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./etc/promtail-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./etc/prometheus.yaml:/etc/prometheus.yaml
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.2
    volumes:
      - ./data/grafana-data/datasources:/etc/grafana/provisioning/datasources
      - ./data/grafana-data/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./data/grafana-data/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki

  # Database service using PostgreSQL image
  database:
    image: postgres:latest  # Use the latest PostgreSQL image from Docker Hub
    container_name: recy-database  # Define the name of the container
    environment:
      POSTGRES_DB: ${POSTGRES_DB}  # Define the name of the database
      POSTGRES_USER: ${POSTGRES_USER}  # Define the username for accessing the database
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Define the password for the user
      POSTGRES_HOST: recy-db-staging.cor51ojule9a.us-east-1.rds.amazonaws.com  # O host do banco de dados
      POSTGRES_PORT: 5432  # A porta do banco de dados
    ports:
      - '5432:5432'  # Forward the container's port 5432 to the host machine's port 5432 for accessing PostgreSQL
    env_file:
      - .env  # Load environment variables from the .env file in the current directory
  # Backend service
  backend:
    build: .  # Build the Docker image using the Dockerfile in the current directory
    container_name: recy-backend  # Define the name of the container
    ports:
      - '80:80'  # Forward the container's port 3333 to the host machine's port 3333 for accessing the backend service
      - 8081:8081 # prometheus port
    volumes:
      - ./data/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 20s
    depends_on:
      - otel-collector
      - postgres  # Ensure that the backend service starts after the database service is up and running
    environment:
      OTEL_SERVICE_NAME: backend
    env_file:
      - .env  # Load environment variables from the .env file in the current directory
